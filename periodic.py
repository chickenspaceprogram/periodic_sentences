from elements_set import elements_len1, elements_len2
import copy
import argparse

all_element_combos: list = []
elements: list = []

def str_elements(str_check: str) -> None:
    '''
    A recursive function that saves all possible combinations of elements to all_element_combos.
    '''
    global all_element_combos
    global elements
    if str_check[0].upper() in elements_len1:
        elements.append(str_check[0].upper())
        if len(str_check) == 1:
            all_element_combos.append(copy.deepcopy(elements))
        else:
            str_elements(str_check[1:])
        elements.pop()
    
    if len(str_check) >= 1:
        if str_check[:2].capitalize() in elements_len2:
            elements.append(str_check[:2].capitalize())
            if len(str_check) == 2:
                all_element_combos.append(copy.deepcopy(elements))
            else:
                str_elements(str_check[2:])
            elements.pop()

def make_alpha(str_input: str) -> str:
    '''
    Returns a string with all the nonalphabetic characters removed.
    '''
    output = ''
    for char in str_input:
        if char.isalpha():
            output += char
    return output

def print_elements(elements: list[str]) -> None:
    '''
    Prints the elements in one of the element-lists generated by this program in a nice way.
    '''
    for i in elements:
        print(i, end=' ')
    print()

parser: argparse.ArgumentParser = argparse.ArgumentParser(description="Finds every possible way to write a given string using element symbols from the Periodic Table.")
parser.add_argument('input', type=str, nargs='?',help="the string you'd like to write using element symbols")
args = parser.parse_args()
if args.input:
    user_input: str = args.input
else:
    user_input: str = input("Please input a desired string: ")

str_elements(make_alpha(user_input.lower()))

for i in all_element_combos:
    print_elements(i)

if len(all_element_combos) == 0:
    print("Could not write string using element symbols.")